--DROP TABLE MPA, GENRES, FILMS, GENRE_FILM, USERS, LIKE_USERS, FRIENDS;

CREATE TABLE IF NOT EXISTS MPA
(
    MPA_ID   LONG GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    MPA_NAME CHARACTER VARYING(200) NOT NULL
    );

CREATE TABLE IF NOT EXISTS GENRES
(
    GENRE_ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    GENRE_NAME CHARACTER VARYING(50) NOT NULL
    );

CREATE TABLE IF NOT EXISTS FILMS
(
    FILM_ID      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FILM_NAME    CHARACTER VARYING(150) NOT NULL,
    DESCRIPTION  CHARACTER VARYING(500) NOT NULL,
    DURATION     LONG                   NOT NULL,
    RELEASE_DATE DATE                   NOT NULL,
    MPA_ID       LONG                   NOT NULL,

    CONSTRAINT MPA_ID_FK FOREIGN KEY (MPA_ID) REFERENCES MPA (MPA_ID)
    );

CREATE TABLE IF NOT EXISTS GENRE_FILM
(
    FILM_ID  INTEGER REFERENCES FILMS (FILM_ID),
    GENRE_ID INTEGER REFERENCES GENRES (GENRE_ID)
    );

CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_NAME CHARACTER VARYING(100) NOT NULL,
    LOGIN     CHARACTER VARYING(50)  NOT NULL,
    EMAIL     CHARACTER VARYING(200) NOT NULL,
    BIRTHDAY  DATE NOT NULL
    );

CREATE UNIQUE INDEX IF NOT EXISTS USERS_EMAIL_UNQ
    on USERS (EMAIL);

CREATE UNIQUE INDEX IF NOT EXISTS USERS_LOGIN_UNQ
    on USERS (LOGIN);

CREATE TABLE IF NOT EXISTS LIKE_USERS
(
    FILM_ID INTEGER REFERENCES FILMS (FILM_ID),
    USER_ID INTEGER REFERENCES USERS (USER_ID)
    );

CREATE TABLE IF NOT EXISTS FRIENDS
(
    USER_ID   INTEGER NOT NULL,
    FRIEND_ID INTEGER NOT NULL,
    STATUS    BOOLEAN NOT NULL,
    CONSTRAINT FRIENDS_PK PRIMARY KEY (USER_ID, FRIEND_ID),
    CONSTRAINT FRIENDS_USER_ID_FK FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID),
    CONSTRAINT FRIENDS_FRIEND_ID_FK FOREIGN KEY (FRIEND_ID) REFERENCES USERS (USER_ID)
    );

--create table TOP_FILM
--(
--    LIKE_FILM INTEGER PRIMARY KEY,
--    FILM_ID   INTEGER
--);
