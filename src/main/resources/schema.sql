CREATE TABLE IF NOT EXISTS RATINGS
(
    RATING_ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    RATING_NAME varchar(10), -- NOT NULL ,
    CONSTRAINT uc_rating_name UNIQUE (RATING_NAME)
);

CREATE TABLE IF NOT EXISTS GENRES
(
    GENRE_ID LONG GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME     VARCHAR(30),-- NOT NULL,
    CONSTRAINT genre_name UNIQUE (NAME)
);

CREATE TABLE IF NOT EXISTS DIRECTORS
(
    DIRECTOR_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DIRECTOR_NAME VARCHAR(60),
    CONSTRAINT uc_director_name UNIQUE (DIRECTOR_NAME)
);



CREATE TABLE IF NOT EXISTS FILMS
(
    FILM_ID      LONG GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME         VARCHAR(150),

    DESCRIPTION  VARCHAR(500) NOT NULL,
    RELEASE_DATE DATE         NOT NULL,
    DURATION     INTEGER      NOT NULL,
    RATING_ID    INTEGER REFERENCES RATINGS (RATING_ID),
    DIRECTOR_ID INTEGER REFERENCES DIRECTORS (DIRECTOR_ID)
    --CONSTRAINT fk_film_rating_id FOREIGN KEY (RATING_ID) REFERENCES RATINGS (RATING_ID)
);

CREATE TABLE IF NOT EXISTS film_director (
                                             FILM_ID LONG REFERENCES FILMS(FILM_ID),
                                             DIRECTOR_ID INTEGER REFERENCES DIRECTORS(DIRECTOR_ID),
                                             PRIMARY KEY (FILM_ID, DIRECTOR_ID)
);

CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID   LONG GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EMAIL     VARCHAR(50) NOT NULL,
    LOGIN     VARCHAR(50) NOT NULL,
    USER_NAME VARCHAR(50) NOT NULL,
    BIRTHDAY  DATE        NOT NULL,
    CONSTRAINT user_email UNIQUE (EMAIL),
    CONSTRAINT user_login UNIQUE (LOGIN)
);

CREATE TABLE IF NOT EXISTS FILMS_LIKES
(
    FILM_ID LONG NOT NULL,
    USER_ID LONG NOT NULL,
    CONSTRAINT film_like PRIMARY KEY (FILM_ID, USER_ID),
    CONSTRAINT film_like_film_id FOREIGN KEY (FILM_ID) REFERENCES FILMS (FILM_ID)
        ON DELETE CASCADE,
    CONSTRAINT film_like_user_id FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)
);

CREATE TABLE IF NOT EXISTS FRIENDS
(
    USER_ID   LONG NOT NULL,
    FRIEND_ID LONG NOT NULL,
    CONSTRAINT friendship PRIMARY KEY (USER_ID, FRIEND_ID),
    CONSTRAINT friendship_user_id1 FOREIGN KEY (USER_ID) REFERENCES users (USER_ID)
        ON DELETE CASCADE,
    CONSTRAINT friendship_user_id2 FOREIGN KEY (FRIEND_ID) REFERENCES users (USER_ID)
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS FILMS_GENRES
(
    FILM_ID  LONG NOT NULL,
    GENRE_ID LONG NOT NULL,
    CONSTRAINT GENRE_FILM PRIMARY KEY (FILM_ID, GENRE_ID),
    CONSTRAINT GENRE_FILM_film_id FOREIGN KEY (FILM_ID) REFERENCES FILMS (FILM_ID)
        ON DELETE CASCADE,
    CONSTRAINT GENRE_FILM_genre_id FOREIGN KEY (GENRE_ID) REFERENCES GENRES (GENRE_ID)
);